class w{constructor(e,t){this.baseUrl=e,this.chatbotUuid=t}async loadSession(e){try{const t=await fetch(`${this.baseUrl}/api/website/session`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({workspace_uuid:this.chatbotUuid,conversation_uuid:e})});if(!t.ok)throw new Error(`HTTP error! Status: ${t.status}`);return await t.json()}catch(t){throw console.error("Failed to load session:",t),t}}async sendMessage(e,t){try{const s=await fetch(`${this.baseUrl}/api/website/message`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({workspace_uuid:this.chatbotUuid,message:e,conversation_uuid:t})});if(!s.ok){const o=await s.json();throw new Error(o.message||`HTTP error! Status: ${s.status}`)}return await s.json()}catch(s){throw console.error("Failed to send message:",s),s}}async submitLead(e,t){try{const s=await fetch(`${this.baseUrl}/api/website/lead`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({workspace_uuid:this.chatbotUuid,conversation_uuid:t,name:e.name,email:e.email})});if(!s.ok)throw new Error(`HTTP error! Status: ${s.status}`);return await s.json()}catch(s){throw console.error("Failed to submit lead:",s),s}}async dislikeMessage(e,t){try{const s=await fetch(`${this.baseUrl}/api/website/dislike`,{method:"POST",headers:{"Content-Type":"application/json",Accept:"application/json"},body:JSON.stringify({workspace_uuid:this.chatbotUuid,conversation_uuid:t,message_id:e})});if(!s.ok)throw new Error(`HTTP error! Status: ${s.status}`);return await s.json()}catch(s){throw console.error("Failed to dislike message:",s),s}}}class y{constructor(e){var t;this.settings=e,this.avatarEnabled=((t=e==null?void 0:e.avatar_style)==null?void 0:t.show_avatars)??!0,this.markedRenderer=this.setupMarkdownRenderer()}setupMarkdownRenderer(){const e=new marked.Renderer;return e.link=(t,s,o)=>{let n=t;if(typeof t=="object"&&t!==null)if(t.href)n=t.href;else if(t.text)n=t.text;else try{n=String(t)}catch{n="#"}n||(n="#"),n=String(n),n.match(/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/)?n=`mailto:${n}`:n.match(/^(\+?[0-9\s-()]{8,})$/)?n=`tel:${n.replace(/[\s-()]/g,"")}`:!n.match(/^[a-zA-Z]+:\/\//)&&!n.startsWith("#")&&!n.startsWith("/")&&!n.startsWith("mailto:")&&!n.startsWith("tel:")&&(n=`https://${n}`);const l=o||typeof t=="object"&&(t==null?void 0:t.text)||n||"link";return`<a class="text-blue-500" href="${n}" target="_blank" rel="noopener noreferrer" title="${s||""}">${l}</a>`},e}createMessageHTML(e,t="Assistant",s=null){var m,p,b,f;console.log("🎨 MessageRenderer: Creating message HTML",{message:e.substring(0,100)+"...",role:t,hasCallback:!!s});const o=t==="User",n=o?"chat-bubble-user":"chat-bubble-assistant",l=o?"ml-auto justify-end":"",a=o?((p=(m=this.settings)==null?void 0:m.avatar_style)==null?void 0:p.user_avatar)||"default":((f=(b=this.settings)==null?void 0:b.avatar_style)==null?void 0:f.assistant_avatar)||"default";let i="";if(this.avatarEnabled){const h=this.getAvatarContent(a,o);i=`
        <div class="flex-shrink-0 ${o?"order-2 ml-2":"mr-2"}" style="width: 32px; height: 32px;">
          ${h}
        </div>
      `}let r=e;typeof e!="string"&&(r=String(e||""));try{const h=marked.parse(r,{renderer:this.markedRenderer}),c=`message-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;console.log("🎨 MessageRenderer: Generated message ID",c);const u=`
        <div class="flex max-w-[94%] ${l} items-start" id="${c}">
          ${!o&&this.avatarEnabled?i:""}
          <div class="chat-bubble-radius relative min-w-0 break-words shadow-sm ${n}">
            <div class="flex-auto px-3 py-2">
              ${h}
            </div>
          </div>
          ${o&&this.avatarEnabled?i:""}
        </div>
      `;return s&&typeof s=="function"?(console.log("🎨 MessageRenderer: Setting up callback for message",c),setTimeout(()=>{console.log("🎨 MessageRenderer: Looking for element",c);const g=document.getElementById(c);g?(console.log("🎨 MessageRenderer: Element found, waiting for content load",c),this.waitForContentLoad(g).then(()=>{console.log("🎨 MessageRenderer: Content loaded, calling callback",c),s(g)})):(console.warn("🎨 MessageRenderer: Element not found, using fallback",c),setTimeout(()=>{console.log("🎨 MessageRenderer: Fallback callback triggered",c),s(null)},100))},50)):console.log("🎨 MessageRenderer: No callback provided for message",c),u}catch(h){console.error("🎨 MessageRenderer: Error creating message HTML",h);const c=`error-message-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,u=`
        <div class="flex max-w-[94%] ${l} items-start" id="${c}">
          ${!o&&this.avatarEnabled?i:""}
          <div class="chat-bubble-radius relative min-w-0 break-words shadow-sm ${n}">
            <div class="flex-auto px-3 py-2">
              <p>Error rendering message</p>
              <pre>${r}</pre>
            </div>
          </div>
          ${o&&this.avatarEnabled?i:""}
        </div>
      `;return s&&typeof s=="function"&&setTimeout(()=>{const g=document.getElementById(c);console.log("🎨 MessageRenderer: Error message callback triggered",c),s(g)},50),u}}waitForContentLoad(e){return console.log("🎨 MessageRenderer: Waiting for content load in element",e.id),new Promise(t=>{const s=e.querySelectorAll("img"),o=e.querySelectorAll("iframe");if(console.log("🎨 MessageRenderer: Found content to wait for",{images:s.length,iframes:o.length}),s.length===0&&o.length===0){console.log("🎨 MessageRenderer: No media content, resolving immediately"),t();return}let n=0;const l=s.length+o.length,a=()=>{n++,console.log("🎨 MessageRenderer: Content loaded",{loadedCount:n,totalCount:l}),n>=l&&(console.log("🎨 MessageRenderer: All content loaded, resolving"),t())};s.forEach((i,r)=>{i.complete?(console.log("🎨 MessageRenderer: Image already loaded",r),a()):(console.log("🎨 MessageRenderer: Setting up load listener for image",r),i.addEventListener("load",()=>{console.log("🎨 MessageRenderer: Image loaded",r),a()}),i.addEventListener("error",()=>{console.log("🎨 MessageRenderer: Image error",r),a()}))}),o.forEach((i,r)=>{console.log("🎨 MessageRenderer: Setting up load listener for iframe",r),i.addEventListener("load",()=>{console.log("🎨 MessageRenderer: Iframe loaded",r),a()}),i.addEventListener("error",()=>{console.log("🎨 MessageRenderer: Iframe error",r),a()})}),setTimeout(()=>{console.log("🎨 MessageRenderer: Timeout reached, resolving anyway"),t()},2e3)})}createTypingIndicatorHTML(){return`
      <div class="flex max-w-[94%]" id="typing-indicator">
        <div class="chat-bubble-radius relative min-w-0 break-words shadow-sm chat-bubble-assistant">
          <div class="flex-auto px-3 py-2">
            <div class="flex items-center gap-1">
              <div class="animate-bounce [animation-delay:-0.3s] h-2 w-2 bg-zinc-500 rounded-full"></div>
              <div class="animate-bounce [animation-delay:-0.15s] h-2 w-2 bg-zinc-500 rounded-full"></div>
              <div class="animate-bounce h-2 w-2 bg-zinc-500 rounded-full"></div>
            </div>
          </div>
        </div>
      </div>
    `}getAvatarContent(e,t){return t?`
        <div class="flex items-center justify-center h-full w-full rounded-full bg-gray-200 text-gray-600">
          <svg xmlns="http://www.w3.org/2000/svg" class="size-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
            <circle cx="12" cy="7" r="4"></circle>
          </svg>
        </div>
      `:`
        <div class="flex items-center justify-center h-full w-full rounded-full bg-primary-100 text-primary-600" style="background-color: var(--primary-color); color: white;">
          <svg xmlns="http://www.w3.org/2000/svg" class="size-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
          </svg>
        </div>
      `}}class v{constructor(e,t,s){this.settings=e||{},this.apiService=t,this.onLeadSubmitted=s,this.shown=!1}shouldShow(e){return!this.shown&&this.settings["lead-enabled"]&&parseInt(e)===parseInt(this.settings["lead-trigger_after_messages"]||2)}getLeadCollectorHTML(){return`
      <div class="flex max-w-[94%] fade-in">
        <div class="chat-bubble-radius relative min-w-0 break-words shadow-sm chat-bubble-assistant lead-collector-form">
          <div class="flex-auto px-3 py-2">
            <p class="mb-3">${this.settings["lead-heading_message"]||"To provide you with better assistance, could you please share your contact details?"}</p>
            <form class="space-y-3" id="lead-collector-form">
              <div>
                <input type="text" name="name" placeholder="Your Name" required
                  class="w-full rounded-lg border border-zinc-200 px-4 py-2 text-sm" />
              </div>
              <div>
                <input type="email" name="email" placeholder="Your Email" required
                  class="w-full rounded-lg border border-zinc-200 px-4 py-2 text-sm" />
              </div>
              <button type="submit" 
                class="chat-button w-full px-4 py-2 text-sm font-medium hover:opacity-90">
                ${this.settings["lead-button_label"]||"Continue chatting..."}
              </button>
            </form>
          </div>
        </div>
      </div>
    `}initialize(e,t){e.insertAdjacentHTML("beforeend",this.getLeadCollectorHTML()),this.shown=!0,document.getElementById("lead-collector-form").addEventListener("submit",o=>this.handleSubmit(o,t,e))}async handleSubmit(e,t,s){e.preventDefault();const o=new FormData(e.target),n={name:o.get("name"),email:o.get("email")};try{if((await this.apiService.submitLead(n,t)).status==="success"){const a=s.querySelector(".lead-collector-form");a&&(a.parentElement.style.display="none");const i=this.createProfileSummaryHTML(n);s.insertAdjacentHTML("beforeend",i);const r=this.settings["lead-confirmation_message"]||"Thanks for sharing your contact details! How else can I help you?";typeof this.onLeadSubmitted=="function"&&this.onLeadSubmitted(r)}}catch(l){console.error("Failed to submit lead:",l),alert("Sorry, there was an error submitting your information. Please try again.")}}createProfileSummaryHTML(e){return`
      <div class="flex max-w-[94%] ml-auto justify-end">	
        <div class="relative min-w-0 break-words rounded-2xl shadow-lg bg-zinc-100 text-black">
          <div class="p-6">
            <div class="flex items-center space-x-4">
              <span class="relative flex shrink-0 overflow-hidden rounded-full h-12 w-12">
                <span class="flex h-full w-full items-center justify-center rounded-full bg-zinc-200 uppercase">${e.name.slice(0,2)}</span>
              </span>
              <div class="space-y-1">
                <div class="flex items-center space-x-2">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-user h-4 w-4 text-muted-foreground">
                    <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
                    <circle cx="12" cy="7" r="4"></circle>
                  </svg>
                  <h3 class="font-medium">${e.name}</h3>
                </div>
                <div class="flex items-center space-x-2">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-mail h-4 w-4 text-muted-foreground">
                    <rect width="20" height="16" x="2" y="4" rx="2"></rect>
                    <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"></path>
                  </svg>
                  <p class="text-sm text-muted-foreground">${e.email}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `}}class T{constructor(e,t){this.settings=e||{},this.onMessageSelected=t,this.container=null}initialize(e){this.container=e,this.messages=this.parseMessages(),this.messages.length!==0&&this.render()}parseMessages(){var e;return(e=this.settings)!=null&&e.suggested_messages?this.settings.suggested_messages.split(`
`).map(t=>t.trim()).filter(t=>t):[]}render(){if(!this.container||this.messages.length===0)return;const e=document.createElement("div");e.className="flex flex-wrap gap-3",(this.messages.length>3?this.messages.sort(()=>Math.random()-.5).slice(0,3):this.messages).forEach(s=>{const o=document.createElement("button");o.className="suggested-button relative min-w-0 break-words cursor-pointer px-3 py-1",o.textContent=s,o.style.backgroundColor="var(--chat-bubble-assistant)",o.style.color="var(--chat-text-assistant)",o.style.borderColor="rgba(0,0,0,0.1)",o.addEventListener("click",()=>{typeof this.onMessageSelected=="function"&&(this.onMessageSelected(s),this.hide())}),e.appendChild(o)}),this.container.innerHTML="",this.container.appendChild(e)}hide(){this.container&&(this.container.innerHTML="")}}class C{constructor(e,t){if(this.settings=(e==null?void 0:e.calendly)||{},this.onCalendlyRendered=t,this.triggerKeywords=[],this.settings.enabled&&this.settings.url){const s=this.settings.trigger_keywords||"schedule,meeting,appointment,book,calendar,time,availability";this.triggerKeywords=s.split(",").map(o=>o.trim().toLowerCase()).filter(o=>o)}}shouldTriggerCalendly(e){if(!this.settings.enabled||!this.settings.url||!e)return!1;const t=e.toLowerCase();return this.triggerKeywords.some(s=>s&&t.includes(s))}getCalendlyHTML(){return`
      <div class="flex max-w-[94%] calendly-container">
        <div class="chat-bubble-radius relative min-w-0 break-words shadow-sm chat-bubble-assistant">
          <div class="flex-auto px-3 py-2">
            <p class="mb-3">${this.settings.message||"You can easily schedule a meeting with me using my calendar. Just click the button below:"}</p>
            <div class="flex justify-center">
              <a href="${this.settings.url}" target="_blank" rel="noopener noreferrer"
                class="chat-button px-4 py-2 text-sm font-medium hover:opacity-90 inline-block text-center">
                ${this.settings.button_text||"Schedule a meeting"}
              </a>
            </div>
          </div>
        </div>
      </div>
    `}render(e){!this.settings.enabled||!this.settings.url||(e.insertAdjacentHTML("beforeend",this.getCalendlyHTML()),typeof this.onCalendlyRendered=="function"&&this.onCalendlyRendered())}getCalendlyData(){return!this.settings.enabled||!this.settings.url?null:{url:this.settings.url,message:this.settings.message||"You can easily schedule a meeting with me using my calendar. Just click the button below:",button_text:this.settings.button_text||"Schedule a meeting"}}}class M{constructor(e){this.config=e,this.chatbotUuid=e.chatbotUuid,this.settings=e.settings||{},this.baseUrl=e.baseUrl||"",this.elements={messagesContainer:document.getElementById("chatbot-messages"),suggestedContainer:document.getElementById("chatbot-suggested"),form:document.getElementById("chatbot-form"),input:document.getElementById("chatbot-input"),resetButton:document.getElementById("chatbot-reset")},this.state={messages:[],conversationUuid:localStorage.getItem(`chatbot_conversation_${this.getChatbotStorageId()}`),isDisabled:!1,canReset:!1},this.initializeServices(),this.initializeModules(),this.addEventListeners(),this.loadSession()}getChatbotStorageId(){return this.config.storageId||md5(this.chatbotUuid)}initializeServices(){this.apiService=new w(this.baseUrl,this.chatbotUuid),this.messageRenderer=new y(this.settings)}initializeModules(){this.leadCollector=new v(this.settings,this.apiService,e=>this.renderAssistantMessage(e)),this.suggestedMessages=new T(this.settings,e=>{this.elements.input.value=e,this.sendMessage()}),this.calendly=new C(this.settings,()=>this.scrollToBottom()),this.setupAutoScrolling()}setupAutoScrolling(){this.elements.messagesContainer&&new MutationObserver(t=>{t.some(o=>o.type==="childList"&&o.addedNodes.length>0?Array.from(o.addedNodes).some(n=>{var l,a;return n.nodeType===Node.ELEMENT_NODE&&(n.id==="typing-indicator"||((l=n.classList)==null?void 0:l.contains("lead-collector-form"))||((a=n.classList)==null?void 0:a.contains("calendly-container")))}):!1)&&setTimeout(()=>{this.scrollToBottom()},100)}).observe(this.elements.messagesContainer,{childList:!0,subtree:!0}),window.addEventListener("resize",()=>{setTimeout(()=>{this.scrollToBottom()},100)})}addEventListeners(){var e,t;this.elements.form.addEventListener("submit",s=>{s.preventDefault(),this.sendMessage()}),this.elements.resetButton&&this.elements.resetButton.addEventListener("click",()=>this.handleReset()),setTimeout(()=>{this.elements.input&&!this.state.isDisabled&&this.elements.input.focus()},500),(((t=(e=this.settings)==null?void 0:e.chat_interface)==null?void 0:t.send_on_enter)??!0)&&document.addEventListener("keydown",s=>{s.key==="Enter"&&!s.shiftKey&&this.elements.input.value.trim()!==""&&!this.state.isDisabled&&(s.preventDefault(),this.sendMessage())})}async loadSession(){var e,t;try{const s=await this.apiService.loadSession(this.state.conversationUuid);s.status==="success"?(this.state.conversationUuid=s.conversation_uuid,localStorage.setItem(`chatbot_conversation_${this.getChatbotStorageId()}`,this.state.conversationUuid),this.state.messages=s.messages||[],this.renderMessages(),this.state.canReset=this.state.messages.length>0,this.elements.resetButton&&(this.elements.resetButton.style.display=this.state.canReset?"flex":"none"),this.state.messages.length===0&&this.suggestedMessages.initialize(this.elements.suggestedContainer),setTimeout(()=>{this.scrollToBottom()},100)):(console.error("API returned error:",s.message||"Unknown error"),this.state.conversationUuid=null,localStorage.removeItem(`chatbot_conversation_${this.getChatbotStorageId()}`),this.state.messages=[],this.renderMessages())}catch(s){console.error("Failed to load session:",s),this.elements.messagesContainer.innerHTML=this.messageRenderer.createMessageHTML(((t=(e=this.settings)==null?void 0:e.chat_interface)==null?void 0:t.fallback_message)||"Sorry, I had trouble connecting. Please try again later."),this.scrollToBottom()}}renderMessages(){var n,l;console.log("📝 ChatbotApp: Starting renderMessages");const e=this.elements.messagesContainer;e.innerHTML="";let t=[],s=0;(l=(n=this.settings)==null?void 0:n.chat_interface)!=null&&l.welcome_message&&(console.log("📝 ChatbotApp: Adding welcome message to render queue"),t.push({message:this.settings.chat_interface.welcome_message,role:"Assistant",isWelcome:!0})),this.state.messages.forEach(a=>{console.log("📝 ChatbotApp: Adding existing message to render queue",{role:a.role_label}),t.push({message:a.message,role:a.role_label,isWelcome:!1})}),console.log("📝 ChatbotApp: Total messages to render",t.length);const o=()=>{s++,console.log("📝 ChatbotApp: Message rendered",{renderedCount:s,total:t.length}),s===t.length&&(console.log("📝 ChatbotApp: All messages rendered, scrolling to bottom"),this.scrollToBottom())};t.forEach((a,i)=>{const r=i===t.length-1;console.log("📝 ChatbotApp: Rendering message",{index:i,isLast:r,role:a.role});const m=this.messageRenderer.createMessageHTML(a.message,a.role,r?o:()=>{});e.innerHTML+=m}),t.length===0&&(console.log("📝 ChatbotApp: No messages to render, scrolling anyway"),this.scrollToBottom())}renderAssistantMessage(e){console.log("📝 ChatbotApp: Rendering assistant message with callback");const t=this.messageRenderer.createMessageHTML(e,"Assistant",()=>{console.log("📝 ChatbotApp: Assistant message rendered callback triggered"),this.scrollToBottom()});this.elements.messagesContainer.innerHTML+=t}async sendMessage(){console.log("📤 ChatbotApp: Starting sendMessage");const e=this.elements.input,t=e.value.trim();if(!t)return;e.value="",this.state.isDisabled=!0,this.updateInputState(),this.suggestedMessages.hide(),console.log("📤 ChatbotApp: Creating user message with callback");const s=this.messageRenderer.createMessageHTML(t,"User",()=>{console.log("📤 ChatbotApp: User message rendered callback triggered"),this.scrollToBottom()});this.elements.messagesContainer.innerHTML+=s,this.showTypingIndicator();try{if(this.state.conversationUuid||(console.warn("No conversation UUID found, attempting to create a new session"),await this.loadSession()),this.calendly.shouldTriggerCalendly(t)){console.log("📤 ChatbotApp: Triggering Calendly"),this.hideTypingIndicator(),this.calendly.render(this.elements.messagesContainer),setTimeout(()=>{this.scrollToBottom()},100),this.state.isDisabled=!1,this.updateInputState();return}console.log("📤 ChatbotApp: Sending message to API");const o=await this.apiService.sendMessage(t,this.state.conversationUuid);if(o.status==="success"&&o.message){console.log("📤 ChatbotApp: API response received, hiding typing indicator"),this.hideTypingIndicator(),this.state.messages.push({role_label:"User",message:t}),console.log("📤 ChatbotApp: Creating assistant message with callback");const n=this.messageRenderer.createMessageHTML(o.message.message,o.message.role_label,()=>{console.log("📤 ChatbotApp: Assistant message rendered callback triggered"),this.scrollToBottom(),this.handlePostMessageContent(o)});this.elements.messagesContainer.innerHTML+=n,this.state.messages.push({role_label:"Assistant",message:o.message.message}),this.state.canReset=!0,this.elements.resetButton&&(this.elements.resetButton.style.display="flex")}else throw new Error(o.message||"Unknown error")}catch(o){console.error("📤 ChatbotApp: Failed to send message:",o),this.hideTypingIndicator(),console.log("📤 ChatbotApp: Creating error message with callback");const n=this.messageRenderer.createMessageHTML(o.message||"Sorry, I encountered an error. Please try again.","Assistant",()=>{console.log("📤 ChatbotApp: Error message rendered callback triggered"),this.scrollToBottom()});this.elements.messagesContainer.innerHTML+=n}finally{this.state.isDisabled=!1,this.updateInputState(),this.elements.input&&this.elements.input.focus()}}handlePostMessageContent(e){console.log("📤 ChatbotApp: Handling post-message content"),e.calendly?(console.log("📤 ChatbotApp: Rendering Calendly from response"),this.calendly.render(this.elements.messagesContainer),setTimeout(()=>{this.scrollToBottom()},100)):this.calendly.shouldTriggerCalendly(e.message.message)&&(console.log("📤 ChatbotApp: Rendering Calendly from message trigger"),this.calendly.render(this.elements.messagesContainer),setTimeout(()=>{this.scrollToBottom()},100));const t=this.state.messages.filter(s=>s.role_label==="Assistant").length;this.leadCollector.shouldShow(t)&&(console.log("📤 ChatbotApp: Showing lead collector"),setTimeout(()=>{this.leadCollector.initialize(this.elements.messagesContainer,this.state.conversationUuid),setTimeout(()=>{this.scrollToBottom()},100),(this.settings["lead-mandatory_form_submission"]??!1)&&(this.state.isDisabled=!0,this.updateInputState())},5e3))}showTypingIndicator(){console.log("⌨️ ChatbotApp: Showing typing indicator"),this.elements.messagesContainer.innerHTML+=this.messageRenderer.createTypingIndicatorHTML(),setTimeout(()=>{console.log("⌨️ ChatbotApp: Scrolling after typing indicator"),this.scrollToBottom()},50)}hideTypingIndicator(){console.log("⌨️ ChatbotApp: Hiding typing indicator");const e=document.getElementById("typing-indicator");e&&(e.remove(),setTimeout(()=>{console.log("⌨️ ChatbotApp: Scrolling after hiding typing indicator"),this.scrollToBottom()},50))}updateInputState(){this.elements.input.disabled=this.state.isDisabled,this.state.isDisabled?this.elements.input.classList.add("opacity-50","cursor-not-allowed"):this.elements.input.classList.remove("opacity-50","cursor-not-allowed")}async handleReset(){confirm("Are you sure you want to reset the chat?")&&(localStorage.removeItem(`chatbot_conversation_${this.getChatbotStorageId()}`),this.state.conversationUuid=null,this.state.messages=[],this.state.canReset=!1,this.elements.resetButton&&(this.elements.resetButton.style.display="none"),await this.loadSession(),this.elements.input&&!this.state.isDisabled&&this.elements.input.focus())}scrollToBottom(){console.log("🔄 ChatbotApp: scrollToBottom called"),console.log("🔄 ChatbotApp: Current scroll positions",{window:{scrollY:window.scrollY,innerHeight:window.innerHeight,pageYOffset:window.pageYOffset},document:{bodyScrollHeight:document.body.scrollHeight,documentElementScrollHeight:document.documentElement.scrollHeight,bodyOffsetHeight:document.body.offsetHeight,documentElementOffsetHeight:document.documentElement.offsetHeight,bodyScrollTop:document.body.scrollTop,documentElementScrollTop:document.documentElement.scrollTop}}),requestAnimationFrame(()=>{console.log("🔄 ChatbotApp: Inside requestAnimationFrame");try{const e=Math.max(document.body.scrollHeight,document.body.offsetHeight,document.documentElement.scrollHeight,document.documentElement.offsetHeight);console.log("🔄 ChatbotApp: Scroll calculation",{bodyScrollHeight:document.body.scrollHeight,bodyOffsetHeight:document.body.offsetHeight,docScrollHeight:document.documentElement.scrollHeight,docOffsetHeight:document.documentElement.offsetHeight,maxScroll:e,currentWindowScrollY:window.scrollY});const t=window.scrollY;window.scrollTo({top:e,left:0,behavior:"smooth"}),console.log("🔄 ChatbotApp: Smooth scroll attempted",{from:t,to:e,currentScrollY:window.scrollY}),setTimeout(()=>{const s=window.scrollY;window.scrollTo(0,e),console.log("🔄 ChatbotApp: Immediate scroll fallback",{beforeFallback:s,targetScroll:e,afterFallback:window.scrollY})},100),setTimeout(()=>{const s=window.scrollY;window.scrollTo(0,999999),console.log("🔄 ChatbotApp: Force scroll executed",{beforeForce:s,afterForce:window.scrollY})},200),setTimeout(()=>{if(document.documentElement.scrollTop!==void 0){const s=document.documentElement.scrollTop;document.documentElement.scrollTop=document.documentElement.scrollHeight,console.log("🔄 ChatbotApp: DocumentElement direct scroll",{from:s,to:document.documentElement.scrollHeight,result:document.documentElement.scrollTop})}if(document.body.scrollTop!==void 0){const s=document.body.scrollTop;document.body.scrollTop=document.body.scrollHeight,console.log("🔄 ChatbotApp: Body direct scroll",{from:s,to:document.body.scrollHeight,result:document.body.scrollTop})}},300),setTimeout(()=>{console.log("🔄 ChatbotApp: Final scroll verification",{windowScrollY:window.scrollY,bodyScrollTop:document.body.scrollTop,docElementScrollTop:document.documentElement.scrollTop,maxPossibleScroll:Math.max(document.body.scrollHeight-window.innerHeight,document.documentElement.scrollHeight-window.innerHeight,0)})},500)}catch(e){console.error("🔄 ChatbotApp: Scroll failed:",e);try{window.scrollTo(0,999999),document.documentElement.scrollTop=999999,document.body.scrollTop=999999,console.log("🔄 ChatbotApp: Ultimate fallback executed")}catch(t){console.error("🔄 ChatbotApp: All scroll methods failed:",t)}}})}}document.addEventListener("DOMContentLoaded",()=>{const d=window.chatbotConfig||{};window.chatbot=new M({chatbotUuid:d.uuid,settings:d.settings,baseUrl:d.baseUrl||window.location.origin,storageId:d.storageId})});
